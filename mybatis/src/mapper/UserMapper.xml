<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace属性：指定当前mapper配置文件的唯一标识符
        如果是纯配置文件的方式，没有接口，值可以随便写
        如果是配置文件+接口的方式，值必须是对应接口的全名
-->
<mapper namespace="dao.UserDao">

    <!--
        resultMap：定义结果映射，将数据库的字段与对象的属性进行映射
            id属性：指定该resultMap的唯一标识符
            type属性：指定映射的对象类型
    -->
    <resultMap id="userMap" type="User">
        <!--
            id：配置主键映射
            result：配置其他映射
                property属性：指定映射的属性名
                column属性：指定映射的字段名
        -->
        <id property="id" column="user_id"/>
        <result property="username" column="user_username"/>
        <result property="password" column="user_password"/>
        <result property="phone" column="user_phone"/>
        <result property="address" column="user_address"/>
    </resultMap>

    <!--
        sql：定义sql代码段，便于复用
            id属性：指定该sql代码段的唯一标识符
    -->
    <sql id="userColumn">
        id,
        username,
        password,
        phone,
        address
    </sql>

    <!--
        insert：用来执行添加操作
            id：表示当前的方法名
                如果是纯配置文件的方式，没有接口，值可以随便写，但必须唯一
                如果是配置文件+接口的方式，值必须与接口中的方法名相同
            parameterType：表示方法的参数类型
                如果参数是对象，可以使用类的全名
                如果参数是普通数据，可以使用mybatis中的别名
            标签体：编写sql语句
                使用#{xxx}表示占位符
                如果参数是对象，则xxx为对象的属性名
                如果参数是普通数据，则xxx为参数名
    -->
    <insert id="insertUser" parameterType="User">
        insert into
          t_user
            (username,password,phone,address)
        values
            (#{username},#{password},#{phone},#{address})
    </insert>

    <!--
        useGeneratedKeys属性：设置保存时是否返回主键，取值有两个：
            false：表示不返回主键，默认值
            true：表示返回主键，会自动将返回的主键绑定到参数对象的主键属性中
        keyProperty属性：指定对象的哪个属性为主键属性，即主键所映射的属性，必须指定
    -->
    <insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into
          t_user
            (username,password,phone,address)
        values
            (#{username},#{password},#{phone},#{address})
    </insert>

    <!--
        update：执行修改操作
    -->
    <update id="updateUser" parameterType="User">
        update t_user
        set username=#{username},
            password=#{password},
            phone=#{phone},
            address=#{address}
        where
          id=#{id}
    </update>

    <!--
        delete：执行删除操作
    -->
    <delete id="deleteById" parameterType="int">
        delete from t_user
        where id=#{id}
    </delete>

    <!--
        select：执行查询操作
            resultType属性：表示返回的结果类型
                如果返回的是一个对象，会自动进行映射
                前提条件：查询结果的字段名必须与对象的属性名相同
    -->
    <select id="selectById" parameterType="int" resultType="User">
        select
          id,username,password,phone,address
        from
          t_user
        where
          id=#{id}
    </select>

    <!--
        当方法返回值为对象集合时，resultType指定的是集合中元素的类型，而非集合本身
    -->
    <select id="selectAll" resultType="User">
        <!--
            include：用于引用sql代码段
                refid：指定要引用的sql代码段的id值
        -->
        select
          <include refid="userColumn"/>
        from
          t_user
    </select>

    <!--
        使用别名，为查询结果的每个字段指定别名，与对象的属性名相同，此时相当于自动映射
    -->
    <select id="selectById2" parameterType="int" resultType="User">
        select
          user_id id,
          user_username username,
          user_password password,
          user_phone phone,
          user_address address
        from
          t_user2
        where
          user_id=#{id}
    </select>

    <!--
        resultMap属性：引用一个ResultMap，使用该ResultMap进行手动映射
            其值为已存在的某一个ResultMap标签的id值
    -->
    <select id="selectById3" parameterType="int" resultMap="userMap">
      select
        user_id,
        user_username,
        user_password,
        user_phone,
        user_address
      from
        t_user2
      where
        user_id=#{id}
    </select>

    <!--
        使用参数的索引：索引从0开始，如#{0}表示第一个参数，#{1}表示第二个参数
    -->
    <select id="selectByUsernameAndPassword" resultType="User">
      select <include refid="userColumn"/>
      from t_user
      where username=#{0}  and  password=#{1}
    </select>

    <!--
        使用@Param()定义的名称来引用指定的参数
    -->
    <select id="selectByUsernameAndPassword2" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where username=#{username}  and  password=#{password}
    </select>

    <!--
        将多个参数封装为一个对象，然后传递该对象
    -->
    <select id="selectByUsernameAndPassword3" parameterType="User" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where username=#{username}  and  password=#{password}
    </select>

    <!--
        将多个参数封装成一个Map集合，在#{}占位符中根据key获取value
    -->
    <select id="selectByUsernameAndPassword4" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where username=#{username}  and  password=#{password}
    </select>

    <!--
        手动拼接模糊查询的字段
    -->
    <select id="selectByUsername" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where username like #{username}
    </select>

    <!--
        使用bind对参数进行额外的处理
    -->
    <select id="selectByUsername2" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        <!--
            bind：创建一个变量，并为其绑定值
                name属性：指定变量名
                value属性：指定要绑定的值，可以使用_parameter获取当前方法的参数
        -->
        <bind name="abc" value="'%'+_parameter+'%'"/>
        where username like #{abc}
    </select>

    <!--
        if标签：用来进行条件判断
            test属性：判断表达式的值，如果为true，则拼接sql片段，否则不拼接
    -->
    <select id="selectByParams" parameterType="User" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where 1=1
        <if test="username != null and username !=''">
            and username=#{username}
        </if>
        <if test="password !=null and password !=''">
            and password=#{password}
        </if>
        <if test="phone !=null and phone !=''">
            and phone=#{phone}
        </if>
        <if test="address !=null and address !=''">
            and address=#{address}
        </if>
    </select>

    <!--
        choose标签：用来进行条件的选择，只会拼接一个SQL
            when标签：
                test属性：判断表达式的值，如果为true，则拼接该sql片段，此时不再拼接其他when
            otherwise标签：当所有when都不成立时，则拼接该sql片段
    -->
    <select id="selectByParams2" parameterType="User" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where
        <choose>
            <when test="username!=null and username !=''">
               username=#{username}
            </when>
            <when test="password !=null and password !=''">
                password=#{password}
            </when>
            <when test="phone !=null and phone !=''">
                phone=#{phone}
            </when>
            <when test="address !=null and address !=''">
                address=#{address}
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
    </select>

    <!--
        where标签：一般结合if或choose一起使用
            作用：1.添加where关键字
                  2.删除sql片段的第一个连接关键字，如and、or等
                  3.如果没有拼接任何sql片段，则不会添加where关键字
    -->
    <select id="selectByParams3" parameterType="User" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        <where>
            <if test="username != null and username !=''">
                and username=#{username}
            </if>
            <if test="password !=null and password !=''">
                or password=#{password}
            </if>
            <if test="phone !=null and phone !=''">
                and phone=#{phone}
            </if>
            <if test="address !=null and address !=''">
                and address=#{address}
            </if>
        </where>
    </select>

    <!--
        set标签：一般结合if或choose一起使用
            作用：1.添加set关键字
                  2.删除sql片段末尾的逗号
    -->
    <update id="updateUser2" parameterType="User">
        update t_user
        <set>
            <if test="username != null and username !=''">
                username=#{username},
            </if>
            <if test="password !=null and password !=''">
                password=#{password},
            </if>
            <if test="phone !=null and phone !=''">
                phone=#{phone},
            </if>
            <if test="address !=null and address !=''">
                address=#{address},
            </if>
        </set>
        where id=#{id}
    </update>

    <!--
        trim标签：
            作用：1.在开头或末尾添加特定的前缀prefix或后缀suffix
                  2.删除开头prefixOverrides或末尾suffixOverrides的特定内容
    -->
    <select id="selectByParams4" parameterType="User" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        <trim prefix="where" prefixOverrides="and|or">
            <if test="username != null and username !=''">
                and username=#{username}
            </if>
            <if test="password !=null and password !=''">
                or password=#{password}
            </if>
            <if test="phone !=null and phone !=''">
                and phone=#{phone}
            </if>
            <if test="address !=null and address !=''">
                and address=#{address}
            </if>
        </trim>
    </select>

    <update id="updateUser3" parameterType="User">
        update t_user
        <trim prefix="set" suffixOverrides=",">
            <if test="username != null and username !=''">
                username=#{username},
            </if>
            <if test="password !=null and password !=''">
                password=#{password},
            </if>
            <if test="phone !=null and phone !=''">
                phone=#{phone},
            </if>
            <if test="address !=null and address !=''">
                address=#{address},
            </if>
        </trim>
        where id=#{id}
    </update>

    <!--
        foreach标签：当参数是集合时，用来对集合进行遍历，一般用在in条件中
            collection属性：要遍历集合，默认List集合指定为list，Map集合指定为map，数组指定为array
            item属性：迭代变量
            open属性：遍历前添加的字符串
            close属性：遍历后添加的字符串
            separator属性：元素分隔符
            index属性：当前迭代元素的索引
    -->
    <select id="selectByIds" resultType="User">
        select <include refid="userColumn"/>
        from t_user
        where id in
        <foreach collection="list" item="id" open="(" close=")" separator=",">
          #{id}
        </foreach>
    </select>

</mapper>